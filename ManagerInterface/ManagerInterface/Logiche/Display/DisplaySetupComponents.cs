using System;
using System.IO;
using System.IO.Ports;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.ComponentModel;
using System.Windows.Forms;

using SQLite.Net;
using log4net;
using log4net.Config;
using FTD2XX_NET;
using MoriData;
using Utility;
using Newtonsoft.Json;

namespace ChargerLogic
{
    public partial class DisplaySetup
    {
        public class Immagine
        {
            public byte[] ImageBuffer;
            public Bitmap bmp;
            public Bitmap bmpBase;
            public string Nome;
            public byte Id;
            public byte Numero;
            public byte Lingua;
            /// <summary>
            /// Larghezza in pixel dell'immagine
            /// </summary>
            public byte Width;
            /// <summary>
            /// Altezza in Pixel dell'immagine
            /// </summary>
            public byte Height;
            /// <summary>
            /// Dimensione in Bytes dell'Immagine
            /// Ogni pixel è codificato con un singolo bit
            /// </summary>
            public ushort Size;



            public Immagine()
            {
                Inizializza(240, 128);
            }



            public Immagine(byte Colonne,byte Righe )

            {
                Inizializza(Colonne, Righe);
            }

            public void Clear()
            {
                try
                {
                    ImageBuffer = new byte[Size];
                    bmp = new Bitmap(Width, Height);
                }
                catch
                {

                }
            }

            public void fromBitmap()
            {
                try
                {
                    bmp = new Bitmap(Width, Height);

                    /*
        
                    byte _NumRowBlock = 0;
                    _NumRowBlock = (byte)(Height / 8);
                    for(int _rowBlock = 0; _rowBlock<= _NumRowBlock; _rowBlock++)
                    {
                        for (int _rowBlock = 0; _rowBlock <= _NumRowBlock; _rowBlock++)
                        {

                        }

                    }
                    */

                    byte _NumRowBlock = 0;
                    byte _NumRow = 0;
                    byte _NumCol = 0;


                    for (int _count = 0; _count < ImageBuffer.Length; _count++)

                    // for (int _count = 0; _count < Width *2; _count++)
                    {
                        byte _currcol = (byte)(_count % Width);
                        byte _currRowBlock = (byte)(_count / Width);
                        for (byte _currRow = 0; _currRow < 8; _currRow++)
                        {
                            if (((byte)(ImageBuffer[_count] >> _currRow) & 0x01) == 0x01)
                            {
                                bmp.SetPixel(_currcol, (_currRowBlock * 8 + (_currRow)), Color.Black);
                            }
                            else
                            {
                                bmp.SetPixel(_currcol, (_currRowBlock * 8 + (_currRow)), Color.White);
                            }
                        }
                    }

                }
                catch
                {

                }
            }





            public void GeneraImmagine()
            {
                try
                {
                    bmp = new Bitmap(Width, Height);

                    byte _NumRowBlock = 0;
                    byte _NumRow = 0;
                    byte _NumCol = 0;


                    for (int _count = 0; _count < ImageBuffer.Length; _count++)
                    {
                        byte _currcol = (byte)(_count % Width) ;
                        byte _currRowBlock = (byte)(_count / Width);
                        for(byte _currRow = 0; _currRow < 8; _currRow++)
                        {
                            if(((byte)(ImageBuffer[_count] >> _currRow ) & 0x01) == 0x01)
                            {
                                bmp.SetPixel(_currcol, (_currRowBlock * 8 +( _currRow)), Color.Black);
                            }
                            else
                            {
                                bmp.SetPixel(_currcol, (_currRowBlock * 8 +( _currRow)), Color.White);
                            }
                        }
                    }

                }
                catch
                {

                }
            }



            public void Inizializza(byte Colonne, byte Righe)
            {
                try
                {
                    Nome = "IMAGE000";
                    Id = 0;
                    Numero = 0;
                    Lingua = 0;
                    Width = Colonne;
                    Height = Righe;
                    bmp = new Bitmap(Width, Height);
                    Size = (ushort)((Width * Height) / 8);
                    if (((Width * Height) % 8) != 0)
                    {
                        Size += 1;
                    }

                    ImageBuffer = new byte[Size];
                }
                catch
                {

                }
            }



            public bool getPixel(byte Col, byte  Row)
            {
                try
                {
                    bool StatoPixel = false;
                    ushort index = 0;

                    //index = Row / 8;


                    return StatoPixel;
                }
                catch
                {
                    return false;
                }
            }

            public void SetDemo5()
            {

                byte[] Image005 = new byte[940]
                {
                    0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0xFC , 0xFC , 0xFC , 0xFC , 0xFC , 0xFC,
                    0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80,
                    0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80,
                    0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80,
                    0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0xFC , 0xFC,
                    0xFC , 0xFC , 0xFC , 0xFC , 0x80 , 0x80 , 0x80 , 0x80 , 0x80 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0xF0 , 0xFC,
                    0xFE , 0xFF , 0x1F , 0x0F , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7,
                    0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7,
                    0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7,
 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7,
 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7,
 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0x0F , 0x1F , 0xFF , 0xFE , 0xFC , 0xF0 , 0xFF , 0xFF , 0xFF , 0xFF,
 0x00 , 0x00 , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F,
 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F,
 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F,
 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F,
 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F,
 0x9F , 0x9F , 0x9F , 0x9F , 0x00 , 0x00 , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0x00 , 0x00,
 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F,
 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F,
 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F,
 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F,
 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F , 0x7F,
 0x7F , 0x7F , 0x00 , 0x00 , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0x00 , 0x00 , 0xFE , 0xFE,
 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE,
 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE,
 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE,
 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE,
 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE , 0xFE,
 0x00 , 0x00 , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0x00 , 0x00 , 0xF9 , 0xF9 , 0xF9 , 0xF9,
 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9,
 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9,
 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9,
 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9,
 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0xF9 , 0x00 , 0x00,
 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0x00 , 0x00 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7,
 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7,
 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7,
 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7,
 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7,
 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0xE7 , 0x00 , 0x00 , 0xFF , 0xFF,
 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0x00 , 0x00 , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F,
 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F,
 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F,
 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F,
 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F,
 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x9F , 0x00 , 0x00 , 0xFF , 0xFF , 0xFF , 0xFF,
 0xFF , 0xFF , 0xFF , 0xFF , 0x00 , 0x00 , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF,
 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF,
 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF,
 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF,
 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF,
 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0x00 , 0x00 , 0xFF , 0xFF , 0xFF , 0xFF , 0x3F , 0x3F,
 0x3F , 0x3F , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C,
 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C,
 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C,
 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C,
 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C,
 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3C , 0x3F , 0x3F , 0x3F , 0x3F
 };

                Nome = "IMAGE005";
                Id = 0;
                Numero = 5;
                Lingua = 0;
                Width = 94;
                Height = 80;
                Size = 940;
                ImageBuffer = Image005;
                bmp = new Bitmap(Width, Height);
            }
        }

        public class Schermata
        {
            public List<Comando> Comandi = new List<Comando>();
        }

        public class Comando
        {
            public byte Numero;
            public MessaggioDisplay.ComandoInvioSchermata Attivita;
            private byte[] _HexMap;

            public byte LenStringa;
            public byte LenPixStringa;
            public byte HighPixStringa;
            public byte PosX;
            public byte PosY;
            public byte Colore;
            public byte IdVariabile;
            public ushort IdImmagine;
            public byte TimeOnVar;
            public byte TimeOffVar;
            public byte TimeScroll;
            public byte NumImg;
            public ushort[] SerieImmagini;
            public string Messaggio;

            public byte[] ArrayComando()
            {
                return null;
            }

        }

        public class Variabile
        {
            public string Nome { get; set; }
            public byte Id { get; set; }
            public string Valore { get; set; }
        }

    

        public class DataModel
        {
            public string NomeModello;
            public string Versione;
            public string Note;
            public string VersioneFirmware;
            public string LinguaBase;
            public ushort CRC;

            public DateTime DataCreazione;
            public DateTime DataModifica;

            public List<Immagine> Immagini = new List<Immagine>();
            public List<Schermata> Schermate = new List<Schermata>();
            public List<Variabile> Variabili = new List<Variabile>();
        }
    }
}
